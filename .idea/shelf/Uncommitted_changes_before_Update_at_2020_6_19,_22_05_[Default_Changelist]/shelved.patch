Index: src/com/fan/crackingthecodinginterview/chap02/Num03.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.crackingthecodinginterview.chap02;\n\nimport com.fan.util.ListNode;\n\nimport java.util.List;\n\n/**\n * @author : PF_23\n * @Description : Delete Middle Node: Implement an algorithm to delete a node in the middle\n * (i.e., any node but the first and last node, not necessarily the exact middle) of a singly linked list,\n * given only access to that node.\n * EXAMPLE\n * lnput:the node c from the linked list a->b->c->d->e->f\n * Result: nothing is returned, but the new linked list looks like a->b->d->e- >f\n * @date : 2020/06/18.\n */\n\npublic class Num03 {\n\n    public ListNode delMid(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        if (head.next.next == null) {\n            return head.next;\n        }\n        ListNode fast = head.next.next, slow = head;\n        while (fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        ListNode cur = head;\n        while (cur.next != slow) {\n            cur = cur.next;\n        }\n        cur.next = slow.next;\n        return head;\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/fan/crackingthecodinginterview/chap02/Num03.java	(revision d3263844e2c02c5b1215f8d6236e88851d137e8d)
+++ src/com/fan/crackingthecodinginterview/chap02/Num03.java	(date 1592496672216)
@@ -12,7 +12,7 @@
  * EXAMPLE
  * lnput:the node c from the linked list a->b->c->d->e->f
  * Result: nothing is returned, but the new linked list looks like a->b->d->e- >f
- * @date : 2020/06/18.
+ * @date : 2020/06/18. TODO 思路对，实现没对
  */
 
 public class Num03 {
Index: src/com/fan/crackingthecodinginterview/chap02/Num06.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/fan/crackingthecodinginterview/chap02/Num06.java	(date 1592543084175)
+++ src/com/fan/crackingthecodinginterview/chap02/Num06.java	(date 1592543084175)
@@ -0,0 +1,11 @@
+package com.fan.crackingthecodinginterview.chap02;
+
+/**
+ * @author : PF_23
+ * @Description :
+ * @date : 2020/06/19.
+ */
+
+public class Num06 {
+}
+
Index: src/com/fan/crackingthecodinginterview/chap02/Num05.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/fan/crackingthecodinginterview/chap02/Num05.java	(date 1592575538092)
+++ src/com/fan/crackingthecodinginterview/chap02/Num05.java	(date 1592575538092)
@@ -0,0 +1,17 @@
+package com.fan.crackingthecodinginterview.chap02;
+
+/**
+ * @author : PF_23
+ * @Description : Sum Lists: You have two numbers represented by a linked list,where each node contains a single digit.
+ * The digits are stored in reverse order,such that the 1's digit is at the head of the list.
+ * Write a function that adds the two numbers and returns the sum as a linked list.
+ * EXAMPLE
+ * Input: (7-> 1 -> 6) + (5 -> 9 -> 2).That is,617 + 295. Output:2 -> 1 -> 9.Thatis,912.
+ * @date : 2020/06/19.
+ */
+
+public class Num05 {
+
+    public static
+}
+
Index: src/com/fan/crackingthecodinginterview/chap02/Num04.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/fan/crackingthecodinginterview/chap02/Num04.java	(date 1592543086423)
+++ src/com/fan/crackingthecodinginterview/chap02/Num04.java	(date 1592543086423)
@@ -0,0 +1,57 @@
+package com.fan.crackingthecodinginterview.chap02;
+
+import com.fan.util.ListNode;
+
+/**
+ * @author : PF_23
+ * @Description : Partition: Write code to partition a linked list around a value x,
+ * such that all nodes less than x come before all nodes greater than or equal to x.
+ * If x is contained within the list the values of x only need to be after the elements less than x (see below).
+ * The partition element x can appear anywhere in the "right partition";
+ * it does not need to appear between the left and right partitions.
+ * SOLUTION
+ * EXAMPLE
+ * Input: 3 -> 5 -> 8 -> 5 -> 10 -> 2 -> 1[partition=5]
+ * Output: 3 -> 1 -> 2 -> 10 -> 5 -> 5 -> 8
+ * @date : 2020/06/19.
+ */
+
+public class Num04 {
+    public static ListNode partition(ListNode node, int x) {
+        ListNode beforeStart = null;
+        ListNode beforeEnd = null;
+        ListNode afterStart = null;
+        ListNode afterEnd = null;
+        while (node != null) {
+            ListNode next = node.next;
+            node.next = null;
+            if (node.val < x) {
+                if (beforeStart == null) {
+                    beforeStart = node;
+                    beforeEnd = beforeStart;
+                } else {
+                    beforeStart.next = node;
+                    beforeEnd = node;
+                }
+            } else {
+                if (afterStart == null) {
+                    afterStart = node;
+                    afterEnd = afterStart;
+                } else {
+                    afterStart.next = node;
+                    afterEnd = node;
+                }
+            }
+            node = next;
+        }
+
+        if (beforeStart == null) {
+            return afterStart;
+        }
+        beforeEnd.next = afterStart;
+        return beforeStart;
+    }
+
+    // 方法2 ： 创建两条链表，最后连接小的和大的
+}
+
